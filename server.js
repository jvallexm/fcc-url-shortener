 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
var mongodb = require('mongodb');
var MongoClient = mongodb.MongoClient;
var url = process.env.MONGOLAB;


if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })
app.use(function(req, res, next){
  console.log(req.originalUrl);
  
  //expression from https://stackoverflow.com/questions/3809401/what-is-a-good-regular-expression-to-match-a-url
  var expression = /https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/;
  var regex = new RegExp(expression);
  //above from https://stackoverflow.com/questions/3809401/what-is-a-good-regular-expression-to-match-a-url
  
  var isUrl = false;
  if(req.originalUrl.match(regex))
  {
    console.log("it's a match!")
    isUrl = true;
    var longUrl = req.originalUrl;
    MongoClient.connect(url, function (err, db) {
    if (err) {
    console.log('Unable to connect to the mongoDB server. Error:', err);
    } 
    else {
    console.log('Connection established to', url);
    var shortUrls = db.collection('short-urls');
    var obj=null;
    shortUrls.find({},{
      "original_url": longUrl
    }).toArray(function(err,docs){
      if(err){
               console.log('To Array Error');
               throw err;
             }
      return docs;
    });
   
    console.log("Object: " + obj);
    if(obj==false)
    {
      shortUrls.insert({
        oiriginal_url: longUrl,
        short_url: "dsfas"
      },
      function(err,data){
        if(err)
          console.log(err);
        else
          console.log("Great success");
      });
    }
    else
    {
      console.log("It's in there!")
    }
    db.close();
    }
    });    
  } 
  else
  {
    console.log("that's not a match :(");
  }
 
  res.send(isUrl);
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

